<?php
/**
 * ContactData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FullContact APIs
 *
 * Lookup and enrich individuals by sending any identifiers you may already have, such as an email address, Twitter handle or phone number. These identifiers will then be used to locate and return any additional information we may have, such as a personâ€™s name and social handles.
 *
 * OpenAPI spec version: 3.0.0-oas3
 * Contact: support@fullcontact.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.7
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ContactData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContactData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ContactData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'addresses' => '\Swagger\Client\Model\Address[]',
'birthday' => '\Swagger\Client\Model\OrganizationStartDate',
'dates' => '\Swagger\Client\Model\\DateTime[]',
'emails' => '\Swagger\Client\Model\PluralField[]',
'name' => '\Swagger\Client\Model\Name',
'related_people' => '\Swagger\Client\Model\PluralField[]',
'organizations' => '\Swagger\Client\Model\Organization[]',
'urls' => '\Swagger\Client\Model\Account[]',
'notes' => 'string',
'items' => '\Swagger\Client\Model\PluralField[]',
'ims' => '\Swagger\Client\Model\PluralField[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'addresses' => null,
'birthday' => null,
'dates' => null,
'emails' => null,
'name' => null,
'related_people' => null,
'organizations' => null,
'urls' => null,
'notes' => null,
'items' => null,
'ims' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'addresses' => 'addresses',
'birthday' => 'birthday',
'dates' => 'dates',
'emails' => 'emails',
'name' => 'name',
'related_people' => 'relatedPeople',
'organizations' => 'organizations',
'urls' => 'urls',
'notes' => 'notes',
'items' => 'items',
'ims' => 'ims'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'addresses' => 'setAddresses',
'birthday' => 'setBirthday',
'dates' => 'setDates',
'emails' => 'setEmails',
'name' => 'setName',
'related_people' => 'setRelatedPeople',
'organizations' => 'setOrganizations',
'urls' => 'setUrls',
'notes' => 'setNotes',
'items' => 'setItems',
'ims' => 'setIms'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'addresses' => 'getAddresses',
'birthday' => 'getBirthday',
'dates' => 'getDates',
'emails' => 'getEmails',
'name' => 'getName',
'related_people' => 'getRelatedPeople',
'organizations' => 'getOrganizations',
'urls' => 'getUrls',
'notes' => 'getNotes',
'items' => 'getItems',
'ims' => 'getIms'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['addresses'] = isset($data['addresses']) ? $data['addresses'] : null;
        $this->container['birthday'] = isset($data['birthday']) ? $data['birthday'] : null;
        $this->container['dates'] = isset($data['dates']) ? $data['dates'] : null;
        $this->container['emails'] = isset($data['emails']) ? $data['emails'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['related_people'] = isset($data['related_people']) ? $data['related_people'] : null;
        $this->container['organizations'] = isset($data['organizations']) ? $data['organizations'] : null;
        $this->container['urls'] = isset($data['urls']) ? $data['urls'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['ims'] = isset($data['ims']) ? $data['ims'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets addresses
     *
     * @return \Swagger\Client\Model\Address[]
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \Swagger\Client\Model\Address[] $addresses addresses
     *
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets birthday
     *
     * @return \Swagger\Client\Model\OrganizationStartDate
     */
    public function getBirthday()
    {
        return $this->container['birthday'];
    }

    /**
     * Sets birthday
     *
     * @param \Swagger\Client\Model\OrganizationStartDate $birthday birthday
     *
     * @return $this
     */
    public function setBirthday($birthday)
    {
        $this->container['birthday'] = $birthday;

        return $this;
    }

    /**
     * Gets dates
     *
     * @return \Swagger\Client\Model\\DateTime[]
     */
    public function getDates()
    {
        return $this->container['dates'];
    }

    /**
     * Sets dates
     *
     * @param \Swagger\Client\Model\\DateTime[] $dates dates
     *
     * @return $this
     */
    public function setDates($dates)
    {
        $this->container['dates'] = $dates;

        return $this;
    }

    /**
     * Gets emails
     *
     * @return \Swagger\Client\Model\PluralField[]
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param \Swagger\Client\Model\PluralField[] $emails emails
     *
     * @return $this
     */
    public function setEmails($emails)
    {
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets name
     *
     * @return \Swagger\Client\Model\Name
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \Swagger\Client\Model\Name $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets related_people
     *
     * @return \Swagger\Client\Model\PluralField[]
     */
    public function getRelatedPeople()
    {
        return $this->container['related_people'];
    }

    /**
     * Sets related_people
     *
     * @param \Swagger\Client\Model\PluralField[] $related_people related_people
     *
     * @return $this
     */
    public function setRelatedPeople($related_people)
    {
        $this->container['related_people'] = $related_people;

        return $this;
    }

    /**
     * Gets organizations
     *
     * @return \Swagger\Client\Model\Organization[]
     */
    public function getOrganizations()
    {
        return $this->container['organizations'];
    }

    /**
     * Sets organizations
     *
     * @param \Swagger\Client\Model\Organization[] $organizations organizations
     *
     * @return $this
     */
    public function setOrganizations($organizations)
    {
        $this->container['organizations'] = $organizations;

        return $this;
    }

    /**
     * Gets urls
     *
     * @return \Swagger\Client\Model\Account[]
     */
    public function getUrls()
    {
        return $this->container['urls'];
    }

    /**
     * Sets urls
     *
     * @param \Swagger\Client\Model\Account[] $urls urls
     *
     * @return $this
     */
    public function setUrls($urls)
    {
        $this->container['urls'] = $urls;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \Swagger\Client\Model\PluralField[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Swagger\Client\Model\PluralField[] $items items
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets ims
     *
     * @return \Swagger\Client\Model\PluralField[]
     */
    public function getIms()
    {
        return $this->container['ims'];
    }

    /**
     * Sets ims
     *
     * @param \Swagger\Client\Model\PluralField[] $ims ims
     *
     * @return $this
     */
    public function setIms($ims)
    {
        $this->container['ims'] = $ims;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
