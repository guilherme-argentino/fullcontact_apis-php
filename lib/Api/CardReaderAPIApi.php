<?php
/**
 * CardReaderAPIApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * FullContact APIs
 *
 * Lookup and enrich individuals by sending any identifiers you may already have, such as an email address, Twitter handle or phone number. These identifiers will then be used to locate and return any additional information we may have, such as a personâ€™s name and social handles.
 *
 * OpenAPI spec version: 3.0.0-oas3
 * Contact: support@fullcontact.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.7
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * CardReaderAPIApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CardReaderAPIApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation v2CardReaderGet
     *
     * @param  string $page Used to page through the results. If not specified, it defaults to the first page (0). (optional)
     * @param  string $returned_data A response can contain verified and unverified data, this parameter can be used to exclude unverified data from being returned in the response. verifiedOnly - non-verified results will be excluded from the response payload (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2003
     */
    public function v2CardReaderGet($page = null, $returned_data = null)
    {
        list($response) = $this->v2CardReaderGetWithHttpInfo($page, $returned_data);
        return $response;
    }

    /**
     * Operation v2CardReaderGetWithHttpInfo
     *
     * @param  string $page Used to page through the results. If not specified, it defaults to the first page (0). (optional)
     * @param  string $returned_data A response can contain verified and unverified data, this parameter can be used to exclude unverified data from being returned in the response. verifiedOnly - non-verified results will be excluded from the response payload (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2CardReaderGetWithHttpInfo($page = null, $returned_data = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2003';
        $request = $this->v2CardReaderGetRequest($page, $returned_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2003',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2CardReaderGetAsync
     *
     * 
     *
     * @param  string $page Used to page through the results. If not specified, it defaults to the first page (0). (optional)
     * @param  string $returned_data A response can contain verified and unverified data, this parameter can be used to exclude unverified data from being returned in the response. verifiedOnly - non-verified results will be excluded from the response payload (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2CardReaderGetAsync($page = null, $returned_data = null)
    {
        return $this->v2CardReaderGetAsyncWithHttpInfo($page, $returned_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2CardReaderGetAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $page Used to page through the results. If not specified, it defaults to the first page (0). (optional)
     * @param  string $returned_data A response can contain verified and unverified data, this parameter can be used to exclude unverified data from being returned in the response. verifiedOnly - non-verified results will be excluded from the response payload (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2CardReaderGetAsyncWithHttpInfo($page = null, $returned_data = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2003';
        $request = $this->v2CardReaderGetRequest($page, $returned_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2CardReaderGet'
     *
     * @param  string $page Used to page through the results. If not specified, it defaults to the first page (0). (optional)
     * @param  string $returned_data A response can contain verified and unverified data, this parameter can be used to exclude unverified data from being returned in the response. verifiedOnly - non-verified results will be excluded from the response payload (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v2CardReaderGetRequest($page = null, $returned_data = null)
    {

        $resourcePath = '/v2/cardReader';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($returned_data !== null) {
            $queryParams['returnedData'] = ObjectSerializer::toQueryValue($returned_data);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-FullContact-APIKey');
        if ($apiKey !== null) {
            $headers['X-FullContact-APIKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v2CardReaderIdGet
     *
     * @param  string $id id (required)
     * @param  string $returned_data A response can contain verified and unverified data, this parameter can be used to exclude unverified data from being returned in the response. verifiedOnly - non-verified results will be excluded from the response payload (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Transcription
     */
    public function v2CardReaderIdGet($id, $returned_data = null)
    {
        list($response) = $this->v2CardReaderIdGetWithHttpInfo($id, $returned_data);
        return $response;
    }

    /**
     * Operation v2CardReaderIdGetWithHttpInfo
     *
     * @param  string $id (required)
     * @param  string $returned_data A response can contain verified and unverified data, this parameter can be used to exclude unverified data from being returned in the response. verifiedOnly - non-verified results will be excluded from the response payload (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Transcription, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2CardReaderIdGetWithHttpInfo($id, $returned_data = null)
    {
        $returnType = '\Swagger\Client\Model\Transcription';
        $request = $this->v2CardReaderIdGetRequest($id, $returned_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Transcription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2CardReaderIdGetAsync
     *
     * 
     *
     * @param  string $id (required)
     * @param  string $returned_data A response can contain verified and unverified data, this parameter can be used to exclude unverified data from being returned in the response. verifiedOnly - non-verified results will be excluded from the response payload (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2CardReaderIdGetAsync($id, $returned_data = null)
    {
        return $this->v2CardReaderIdGetAsyncWithHttpInfo($id, $returned_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2CardReaderIdGetAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id (required)
     * @param  string $returned_data A response can contain verified and unverified data, this parameter can be used to exclude unverified data from being returned in the response. verifiedOnly - non-verified results will be excluded from the response payload (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2CardReaderIdGetAsyncWithHttpInfo($id, $returned_data = null)
    {
        $returnType = '\Swagger\Client\Model\Transcription';
        $request = $this->v2CardReaderIdGetRequest($id, $returned_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2CardReaderIdGet'
     *
     * @param  string $id (required)
     * @param  string $returned_data A response can contain verified and unverified data, this parameter can be used to exclude unverified data from being returned in the response. verifiedOnly - non-verified results will be excluded from the response payload (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v2CardReaderIdGetRequest($id, $returned_data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling v2CardReaderIdGet'
            );
        }

        $resourcePath = '/v2/cardReader/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($returned_data !== null) {
            $queryParams['returnedData'] = ObjectSerializer::toQueryValue($returned_data);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-FullContact-APIKey');
        if ($apiKey !== null) {
            $headers['X-FullContact-APIKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v2CardReaderIdRepostWebhookPost
     *
     * @param  string $id id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2004
     */
    public function v2CardReaderIdRepostWebhookPost($id)
    {
        list($response) = $this->v2CardReaderIdRepostWebhookPostWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation v2CardReaderIdRepostWebhookPostWithHttpInfo
     *
     * @param  string $id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2CardReaderIdRepostWebhookPostWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2004';
        $request = $this->v2CardReaderIdRepostWebhookPostRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2004',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2CardReaderIdRepostWebhookPostAsync
     *
     * 
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2CardReaderIdRepostWebhookPostAsync($id)
    {
        return $this->v2CardReaderIdRepostWebhookPostAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2CardReaderIdRepostWebhookPostAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2CardReaderIdRepostWebhookPostAsyncWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2004';
        $request = $this->v2CardReaderIdRepostWebhookPostRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2CardReaderIdRepostWebhookPost'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v2CardReaderIdRepostWebhookPostRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling v2CardReaderIdRepostWebhookPost'
            );
        }

        $resourcePath = '/v2/cardReader/{id}/repostWebhook';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-FullContact-APIKey');
        if ($apiKey !== null) {
            $headers['X-FullContact-APIKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v2CardReaderPost
     *
     * @param  string $webhook_url This is the URL that a request will be made to once the card has been processed. Keep in mind that the URL must be properly escaped (i.e. ampersands) and/or URL encoded if not enclosed in single or double quotes (required)
     * @param  \Swagger\Client\Model\Body8 $body body (optional)
     * @param  string $verified Used to specify the quality of transcription. Calls to verified&#x3D;medium require a FullContact premium account. low (default if not specified) - a single human transcription is completed. This is primarily used for testing or while in development. medium - human transcription plus single verification of each data element. This is primarily used when in production. (optional)
     * @param  string $returned_data A response can contain verified and unverified data, this parameter can be used to exclude unverified data from being returned in the response. verifiedOnly - non-verified results will be excluded from the response payload. (optional)
     * @param  string $format Card Reader can alter the casing of certain fields in the final results. default - (default if not specified) - the data is not modified uppercase - Affected fields are converted to UPPER CASE lettering lowercase - Affected fields are converted to lower case lettering titlecase - Affected fields are converted to Title Case lettering Affected fields include name (given name, family name, and middle initial), organizations (title and name), and address fields. (optional)
     * @param  string $sandbox Card Reader Sandbox is a free, quick response mode for testing and development. Read Carefully on how each status option behaves, and what to expect while testing. PROCESSING - The card will appear to be processing and never proceed to finish. There is no webhook. CALLBACK_MADE - After a short delay a request will be sent to your webhook (If the webhook fails, it will become CALLBACK_FAILED). CALLBACK_FAILED - There is no webhook, and the status is marked as CALLBACK_FAILED. CALLBACK_MADE_NOT_PROCESSABLE - After a short delay, an unprocessable indication message will be sent to your webhook (If the webhook fails, it will become CALLBACK_FAILED_NOT_PROCESSABLE). CALLBACK_FAILED_NOT_PROCESSABLE - There is no webhook, and the status is marked as CALLBACK_FAILED_NOT_PROCESSABLE. Sandbox webhooks will look the exact same as the normal responses. Sandbox uploads will have the same photos that you uploaded via POST. Sandbox content will work and look the exact same as normal requests. Other params such as returnedData, verified, format, etc... will work the same as normal requests. Contact data for sandbox is predefined and always the same. Sandbox cards will appear to be processing until a callback is made (if applicable). The Sandbox &#x27;short delay&#x27; before receiving a webhook ranges from 0 to 60 seconds (optional)
     * @param  string $urid URID stands for Unique Request Identifier If you pass in the URID parameter, we will make sure that the request you are referring to by this id is only processed once. This can be useful in low connectivity environments where you might not get a response back, even though we&#x27;ve successfully handled your request. By doing this, you can prevent duplicate or unknown webhooks to your application on retried requests. To use this parameter, it is very important that your URID parameter is unique per image sent because any future requests with the given URID will simply point back to the first request with that URID. Example scenario to use this feature: Mobile application sends a card, we receive it, we start processing it and send the application a 202 response. The mobile application enters a low connectivity area and does not get a response. The mobile application retries the request assuming it failed (however, it did not fail). Without the URID parameter for this request, we start processing a new transcription and give you another 202. This time the mobile application gets the response and is happy, but now also receives two webhooks, one being for a job that failed that has a different id. Because both requests were for the same transcription, the mobile application could have created a URID for this request that is the same for both requests, and the second (retry) request would simply receive a 202 with the id for the first request and the second (retry) request is never processed and not duplicated. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse202
     */
    public function v2CardReaderPost($webhook_url, $body = null, $verified = null, $returned_data = null, $format = null, $sandbox = null, $urid = null)
    {
        list($response) = $this->v2CardReaderPostWithHttpInfo($webhook_url, $body, $verified, $returned_data, $format, $sandbox, $urid);
        return $response;
    }

    /**
     * Operation v2CardReaderPostWithHttpInfo
     *
     * @param  string $webhook_url This is the URL that a request will be made to once the card has been processed. Keep in mind that the URL must be properly escaped (i.e. ampersands) and/or URL encoded if not enclosed in single or double quotes (required)
     * @param  \Swagger\Client\Model\Body8 $body (optional)
     * @param  string $verified Used to specify the quality of transcription. Calls to verified&#x3D;medium require a FullContact premium account. low (default if not specified) - a single human transcription is completed. This is primarily used for testing or while in development. medium - human transcription plus single verification of each data element. This is primarily used when in production. (optional)
     * @param  string $returned_data A response can contain verified and unverified data, this parameter can be used to exclude unverified data from being returned in the response. verifiedOnly - non-verified results will be excluded from the response payload. (optional)
     * @param  string $format Card Reader can alter the casing of certain fields in the final results. default - (default if not specified) - the data is not modified uppercase - Affected fields are converted to UPPER CASE lettering lowercase - Affected fields are converted to lower case lettering titlecase - Affected fields are converted to Title Case lettering Affected fields include name (given name, family name, and middle initial), organizations (title and name), and address fields. (optional)
     * @param  string $sandbox Card Reader Sandbox is a free, quick response mode for testing and development. Read Carefully on how each status option behaves, and what to expect while testing. PROCESSING - The card will appear to be processing and never proceed to finish. There is no webhook. CALLBACK_MADE - After a short delay a request will be sent to your webhook (If the webhook fails, it will become CALLBACK_FAILED). CALLBACK_FAILED - There is no webhook, and the status is marked as CALLBACK_FAILED. CALLBACK_MADE_NOT_PROCESSABLE - After a short delay, an unprocessable indication message will be sent to your webhook (If the webhook fails, it will become CALLBACK_FAILED_NOT_PROCESSABLE). CALLBACK_FAILED_NOT_PROCESSABLE - There is no webhook, and the status is marked as CALLBACK_FAILED_NOT_PROCESSABLE. Sandbox webhooks will look the exact same as the normal responses. Sandbox uploads will have the same photos that you uploaded via POST. Sandbox content will work and look the exact same as normal requests. Other params such as returnedData, verified, format, etc... will work the same as normal requests. Contact data for sandbox is predefined and always the same. Sandbox cards will appear to be processing until a callback is made (if applicable). The Sandbox &#x27;short delay&#x27; before receiving a webhook ranges from 0 to 60 seconds (optional)
     * @param  string $urid URID stands for Unique Request Identifier If you pass in the URID parameter, we will make sure that the request you are referring to by this id is only processed once. This can be useful in low connectivity environments where you might not get a response back, even though we&#x27;ve successfully handled your request. By doing this, you can prevent duplicate or unknown webhooks to your application on retried requests. To use this parameter, it is very important that your URID parameter is unique per image sent because any future requests with the given URID will simply point back to the first request with that URID. Example scenario to use this feature: Mobile application sends a card, we receive it, we start processing it and send the application a 202 response. The mobile application enters a low connectivity area and does not get a response. The mobile application retries the request assuming it failed (however, it did not fail). Without the URID parameter for this request, we start processing a new transcription and give you another 202. This time the mobile application gets the response and is happy, but now also receives two webhooks, one being for a job that failed that has a different id. Because both requests were for the same transcription, the mobile application could have created a URID for this request that is the same for both requests, and the second (retry) request would simply receive a 202 with the id for the first request and the second (retry) request is never processed and not duplicated. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse202, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2CardReaderPostWithHttpInfo($webhook_url, $body = null, $verified = null, $returned_data = null, $format = null, $sandbox = null, $urid = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse202';
        $request = $this->v2CardReaderPostRequest($webhook_url, $body, $verified, $returned_data, $format, $sandbox, $urid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse202',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2CardReaderPostAsync
     *
     * 
     *
     * @param  string $webhook_url This is the URL that a request will be made to once the card has been processed. Keep in mind that the URL must be properly escaped (i.e. ampersands) and/or URL encoded if not enclosed in single or double quotes (required)
     * @param  \Swagger\Client\Model\Body8 $body (optional)
     * @param  string $verified Used to specify the quality of transcription. Calls to verified&#x3D;medium require a FullContact premium account. low (default if not specified) - a single human transcription is completed. This is primarily used for testing or while in development. medium - human transcription plus single verification of each data element. This is primarily used when in production. (optional)
     * @param  string $returned_data A response can contain verified and unverified data, this parameter can be used to exclude unverified data from being returned in the response. verifiedOnly - non-verified results will be excluded from the response payload. (optional)
     * @param  string $format Card Reader can alter the casing of certain fields in the final results. default - (default if not specified) - the data is not modified uppercase - Affected fields are converted to UPPER CASE lettering lowercase - Affected fields are converted to lower case lettering titlecase - Affected fields are converted to Title Case lettering Affected fields include name (given name, family name, and middle initial), organizations (title and name), and address fields. (optional)
     * @param  string $sandbox Card Reader Sandbox is a free, quick response mode for testing and development. Read Carefully on how each status option behaves, and what to expect while testing. PROCESSING - The card will appear to be processing and never proceed to finish. There is no webhook. CALLBACK_MADE - After a short delay a request will be sent to your webhook (If the webhook fails, it will become CALLBACK_FAILED). CALLBACK_FAILED - There is no webhook, and the status is marked as CALLBACK_FAILED. CALLBACK_MADE_NOT_PROCESSABLE - After a short delay, an unprocessable indication message will be sent to your webhook (If the webhook fails, it will become CALLBACK_FAILED_NOT_PROCESSABLE). CALLBACK_FAILED_NOT_PROCESSABLE - There is no webhook, and the status is marked as CALLBACK_FAILED_NOT_PROCESSABLE. Sandbox webhooks will look the exact same as the normal responses. Sandbox uploads will have the same photos that you uploaded via POST. Sandbox content will work and look the exact same as normal requests. Other params such as returnedData, verified, format, etc... will work the same as normal requests. Contact data for sandbox is predefined and always the same. Sandbox cards will appear to be processing until a callback is made (if applicable). The Sandbox &#x27;short delay&#x27; before receiving a webhook ranges from 0 to 60 seconds (optional)
     * @param  string $urid URID stands for Unique Request Identifier If you pass in the URID parameter, we will make sure that the request you are referring to by this id is only processed once. This can be useful in low connectivity environments where you might not get a response back, even though we&#x27;ve successfully handled your request. By doing this, you can prevent duplicate or unknown webhooks to your application on retried requests. To use this parameter, it is very important that your URID parameter is unique per image sent because any future requests with the given URID will simply point back to the first request with that URID. Example scenario to use this feature: Mobile application sends a card, we receive it, we start processing it and send the application a 202 response. The mobile application enters a low connectivity area and does not get a response. The mobile application retries the request assuming it failed (however, it did not fail). Without the URID parameter for this request, we start processing a new transcription and give you another 202. This time the mobile application gets the response and is happy, but now also receives two webhooks, one being for a job that failed that has a different id. Because both requests were for the same transcription, the mobile application could have created a URID for this request that is the same for both requests, and the second (retry) request would simply receive a 202 with the id for the first request and the second (retry) request is never processed and not duplicated. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2CardReaderPostAsync($webhook_url, $body = null, $verified = null, $returned_data = null, $format = null, $sandbox = null, $urid = null)
    {
        return $this->v2CardReaderPostAsyncWithHttpInfo($webhook_url, $body, $verified, $returned_data, $format, $sandbox, $urid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2CardReaderPostAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $webhook_url This is the URL that a request will be made to once the card has been processed. Keep in mind that the URL must be properly escaped (i.e. ampersands) and/or URL encoded if not enclosed in single or double quotes (required)
     * @param  \Swagger\Client\Model\Body8 $body (optional)
     * @param  string $verified Used to specify the quality of transcription. Calls to verified&#x3D;medium require a FullContact premium account. low (default if not specified) - a single human transcription is completed. This is primarily used for testing or while in development. medium - human transcription plus single verification of each data element. This is primarily used when in production. (optional)
     * @param  string $returned_data A response can contain verified and unverified data, this parameter can be used to exclude unverified data from being returned in the response. verifiedOnly - non-verified results will be excluded from the response payload. (optional)
     * @param  string $format Card Reader can alter the casing of certain fields in the final results. default - (default if not specified) - the data is not modified uppercase - Affected fields are converted to UPPER CASE lettering lowercase - Affected fields are converted to lower case lettering titlecase - Affected fields are converted to Title Case lettering Affected fields include name (given name, family name, and middle initial), organizations (title and name), and address fields. (optional)
     * @param  string $sandbox Card Reader Sandbox is a free, quick response mode for testing and development. Read Carefully on how each status option behaves, and what to expect while testing. PROCESSING - The card will appear to be processing and never proceed to finish. There is no webhook. CALLBACK_MADE - After a short delay a request will be sent to your webhook (If the webhook fails, it will become CALLBACK_FAILED). CALLBACK_FAILED - There is no webhook, and the status is marked as CALLBACK_FAILED. CALLBACK_MADE_NOT_PROCESSABLE - After a short delay, an unprocessable indication message will be sent to your webhook (If the webhook fails, it will become CALLBACK_FAILED_NOT_PROCESSABLE). CALLBACK_FAILED_NOT_PROCESSABLE - There is no webhook, and the status is marked as CALLBACK_FAILED_NOT_PROCESSABLE. Sandbox webhooks will look the exact same as the normal responses. Sandbox uploads will have the same photos that you uploaded via POST. Sandbox content will work and look the exact same as normal requests. Other params such as returnedData, verified, format, etc... will work the same as normal requests. Contact data for sandbox is predefined and always the same. Sandbox cards will appear to be processing until a callback is made (if applicable). The Sandbox &#x27;short delay&#x27; before receiving a webhook ranges from 0 to 60 seconds (optional)
     * @param  string $urid URID stands for Unique Request Identifier If you pass in the URID parameter, we will make sure that the request you are referring to by this id is only processed once. This can be useful in low connectivity environments where you might not get a response back, even though we&#x27;ve successfully handled your request. By doing this, you can prevent duplicate or unknown webhooks to your application on retried requests. To use this parameter, it is very important that your URID parameter is unique per image sent because any future requests with the given URID will simply point back to the first request with that URID. Example scenario to use this feature: Mobile application sends a card, we receive it, we start processing it and send the application a 202 response. The mobile application enters a low connectivity area and does not get a response. The mobile application retries the request assuming it failed (however, it did not fail). Without the URID parameter for this request, we start processing a new transcription and give you another 202. This time the mobile application gets the response and is happy, but now also receives two webhooks, one being for a job that failed that has a different id. Because both requests were for the same transcription, the mobile application could have created a URID for this request that is the same for both requests, and the second (retry) request would simply receive a 202 with the id for the first request and the second (retry) request is never processed and not duplicated. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2CardReaderPostAsyncWithHttpInfo($webhook_url, $body = null, $verified = null, $returned_data = null, $format = null, $sandbox = null, $urid = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse202';
        $request = $this->v2CardReaderPostRequest($webhook_url, $body, $verified, $returned_data, $format, $sandbox, $urid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2CardReaderPost'
     *
     * @param  string $webhook_url This is the URL that a request will be made to once the card has been processed. Keep in mind that the URL must be properly escaped (i.e. ampersands) and/or URL encoded if not enclosed in single or double quotes (required)
     * @param  \Swagger\Client\Model\Body8 $body (optional)
     * @param  string $verified Used to specify the quality of transcription. Calls to verified&#x3D;medium require a FullContact premium account. low (default if not specified) - a single human transcription is completed. This is primarily used for testing or while in development. medium - human transcription plus single verification of each data element. This is primarily used when in production. (optional)
     * @param  string $returned_data A response can contain verified and unverified data, this parameter can be used to exclude unverified data from being returned in the response. verifiedOnly - non-verified results will be excluded from the response payload. (optional)
     * @param  string $format Card Reader can alter the casing of certain fields in the final results. default - (default if not specified) - the data is not modified uppercase - Affected fields are converted to UPPER CASE lettering lowercase - Affected fields are converted to lower case lettering titlecase - Affected fields are converted to Title Case lettering Affected fields include name (given name, family name, and middle initial), organizations (title and name), and address fields. (optional)
     * @param  string $sandbox Card Reader Sandbox is a free, quick response mode for testing and development. Read Carefully on how each status option behaves, and what to expect while testing. PROCESSING - The card will appear to be processing and never proceed to finish. There is no webhook. CALLBACK_MADE - After a short delay a request will be sent to your webhook (If the webhook fails, it will become CALLBACK_FAILED). CALLBACK_FAILED - There is no webhook, and the status is marked as CALLBACK_FAILED. CALLBACK_MADE_NOT_PROCESSABLE - After a short delay, an unprocessable indication message will be sent to your webhook (If the webhook fails, it will become CALLBACK_FAILED_NOT_PROCESSABLE). CALLBACK_FAILED_NOT_PROCESSABLE - There is no webhook, and the status is marked as CALLBACK_FAILED_NOT_PROCESSABLE. Sandbox webhooks will look the exact same as the normal responses. Sandbox uploads will have the same photos that you uploaded via POST. Sandbox content will work and look the exact same as normal requests. Other params such as returnedData, verified, format, etc... will work the same as normal requests. Contact data for sandbox is predefined and always the same. Sandbox cards will appear to be processing until a callback is made (if applicable). The Sandbox &#x27;short delay&#x27; before receiving a webhook ranges from 0 to 60 seconds (optional)
     * @param  string $urid URID stands for Unique Request Identifier If you pass in the URID parameter, we will make sure that the request you are referring to by this id is only processed once. This can be useful in low connectivity environments where you might not get a response back, even though we&#x27;ve successfully handled your request. By doing this, you can prevent duplicate or unknown webhooks to your application on retried requests. To use this parameter, it is very important that your URID parameter is unique per image sent because any future requests with the given URID will simply point back to the first request with that URID. Example scenario to use this feature: Mobile application sends a card, we receive it, we start processing it and send the application a 202 response. The mobile application enters a low connectivity area and does not get a response. The mobile application retries the request assuming it failed (however, it did not fail). Without the URID parameter for this request, we start processing a new transcription and give you another 202. This time the mobile application gets the response and is happy, but now also receives two webhooks, one being for a job that failed that has a different id. Because both requests were for the same transcription, the mobile application could have created a URID for this request that is the same for both requests, and the second (retry) request would simply receive a 202 with the id for the first request and the second (retry) request is never processed and not duplicated. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v2CardReaderPostRequest($webhook_url, $body = null, $verified = null, $returned_data = null, $format = null, $sandbox = null, $urid = null)
    {
        // verify the required parameter 'webhook_url' is set
        if ($webhook_url === null || (is_array($webhook_url) && count($webhook_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webhook_url when calling v2CardReaderPost'
            );
        }

        $resourcePath = '/v2/cardReader';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($webhook_url !== null) {
            $queryParams['webhookUrl'] = ObjectSerializer::toQueryValue($webhook_url);
        }
        // query params
        if ($verified !== null) {
            $queryParams['verified'] = ObjectSerializer::toQueryValue($verified);
        }
        // query params
        if ($returned_data !== null) {
            $queryParams['returnedData'] = ObjectSerializer::toQueryValue($returned_data);
        }
        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }
        // query params
        if ($sandbox !== null) {
            $queryParams['sandbox'] = ObjectSerializer::toQueryValue($sandbox);
        }
        // query params
        if ($urid !== null) {
            $queryParams['URID'] = ObjectSerializer::toQueryValue($urid);
        }


        // form params
        if ($front !== null) {
            $formParams['front'] = ObjectSerializer::toFormValue($front);
        }
        // form params
        if ($back !== null) {
            $formParams['back'] = ObjectSerializer::toFormValue($back);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-FullContact-APIKey');
        if ($apiKey !== null) {
            $headers['X-FullContact-APIKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v2CardReaderPost
     *
     * @param  string $webhook_url This is the URL that a request will be made to once the card has been processed. Keep in mind that the URL must be properly escaped (i.e. ampersands) and/or URL encoded if not enclosed in single or double quotes (required)
     * @param  string $front front (optional)
     * @param  string $back back (optional)
     * @param  string $verified Used to specify the quality of transcription. Calls to verified&#x3D;medium require a FullContact premium account. low (default if not specified) - a single human transcription is completed. This is primarily used for testing or while in development. medium - human transcription plus single verification of each data element. This is primarily used when in production. (optional)
     * @param  string $returned_data A response can contain verified and unverified data, this parameter can be used to exclude unverified data from being returned in the response. verifiedOnly - non-verified results will be excluded from the response payload. (optional)
     * @param  string $format Card Reader can alter the casing of certain fields in the final results. default - (default if not specified) - the data is not modified uppercase - Affected fields are converted to UPPER CASE lettering lowercase - Affected fields are converted to lower case lettering titlecase - Affected fields are converted to Title Case lettering Affected fields include name (given name, family name, and middle initial), organizations (title and name), and address fields. (optional)
     * @param  string $sandbox Card Reader Sandbox is a free, quick response mode for testing and development. Read Carefully on how each status option behaves, and what to expect while testing. PROCESSING - The card will appear to be processing and never proceed to finish. There is no webhook. CALLBACK_MADE - After a short delay a request will be sent to your webhook (If the webhook fails, it will become CALLBACK_FAILED). CALLBACK_FAILED - There is no webhook, and the status is marked as CALLBACK_FAILED. CALLBACK_MADE_NOT_PROCESSABLE - After a short delay, an unprocessable indication message will be sent to your webhook (If the webhook fails, it will become CALLBACK_FAILED_NOT_PROCESSABLE). CALLBACK_FAILED_NOT_PROCESSABLE - There is no webhook, and the status is marked as CALLBACK_FAILED_NOT_PROCESSABLE. Sandbox webhooks will look the exact same as the normal responses. Sandbox uploads will have the same photos that you uploaded via POST. Sandbox content will work and look the exact same as normal requests. Other params such as returnedData, verified, format, etc... will work the same as normal requests. Contact data for sandbox is predefined and always the same. Sandbox cards will appear to be processing until a callback is made (if applicable). The Sandbox &#x27;short delay&#x27; before receiving a webhook ranges from 0 to 60 seconds (optional)
     * @param  string $urid URID stands for Unique Request Identifier If you pass in the URID parameter, we will make sure that the request you are referring to by this id is only processed once. This can be useful in low connectivity environments where you might not get a response back, even though we&#x27;ve successfully handled your request. By doing this, you can prevent duplicate or unknown webhooks to your application on retried requests. To use this parameter, it is very important that your URID parameter is unique per image sent because any future requests with the given URID will simply point back to the first request with that URID. Example scenario to use this feature: Mobile application sends a card, we receive it, we start processing it and send the application a 202 response. The mobile application enters a low connectivity area and does not get a response. The mobile application retries the request assuming it failed (however, it did not fail). Without the URID parameter for this request, we start processing a new transcription and give you another 202. This time the mobile application gets the response and is happy, but now also receives two webhooks, one being for a job that failed that has a different id. Because both requests were for the same transcription, the mobile application could have created a URID for this request that is the same for both requests, and the second (retry) request would simply receive a 202 with the id for the first request and the second (retry) request is never processed and not duplicated. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse202
     */
    public function v2CardReaderPost($webhook_url, $front = null, $back = null, $verified = null, $returned_data = null, $format = null, $sandbox = null, $urid = null)
    {
        list($response) = $this->v2CardReaderPostWithHttpInfo($webhook_url, $front, $back, $verified, $returned_data, $format, $sandbox, $urid);
        return $response;
    }

    /**
     * Operation v2CardReaderPostWithHttpInfo
     *
     * @param  string $webhook_url This is the URL that a request will be made to once the card has been processed. Keep in mind that the URL must be properly escaped (i.e. ampersands) and/or URL encoded if not enclosed in single or double quotes (required)
     * @param  string $front (optional)
     * @param  string $back (optional)
     * @param  string $verified Used to specify the quality of transcription. Calls to verified&#x3D;medium require a FullContact premium account. low (default if not specified) - a single human transcription is completed. This is primarily used for testing or while in development. medium - human transcription plus single verification of each data element. This is primarily used when in production. (optional)
     * @param  string $returned_data A response can contain verified and unverified data, this parameter can be used to exclude unverified data from being returned in the response. verifiedOnly - non-verified results will be excluded from the response payload. (optional)
     * @param  string $format Card Reader can alter the casing of certain fields in the final results. default - (default if not specified) - the data is not modified uppercase - Affected fields are converted to UPPER CASE lettering lowercase - Affected fields are converted to lower case lettering titlecase - Affected fields are converted to Title Case lettering Affected fields include name (given name, family name, and middle initial), organizations (title and name), and address fields. (optional)
     * @param  string $sandbox Card Reader Sandbox is a free, quick response mode for testing and development. Read Carefully on how each status option behaves, and what to expect while testing. PROCESSING - The card will appear to be processing and never proceed to finish. There is no webhook. CALLBACK_MADE - After a short delay a request will be sent to your webhook (If the webhook fails, it will become CALLBACK_FAILED). CALLBACK_FAILED - There is no webhook, and the status is marked as CALLBACK_FAILED. CALLBACK_MADE_NOT_PROCESSABLE - After a short delay, an unprocessable indication message will be sent to your webhook (If the webhook fails, it will become CALLBACK_FAILED_NOT_PROCESSABLE). CALLBACK_FAILED_NOT_PROCESSABLE - There is no webhook, and the status is marked as CALLBACK_FAILED_NOT_PROCESSABLE. Sandbox webhooks will look the exact same as the normal responses. Sandbox uploads will have the same photos that you uploaded via POST. Sandbox content will work and look the exact same as normal requests. Other params such as returnedData, verified, format, etc... will work the same as normal requests. Contact data for sandbox is predefined and always the same. Sandbox cards will appear to be processing until a callback is made (if applicable). The Sandbox &#x27;short delay&#x27; before receiving a webhook ranges from 0 to 60 seconds (optional)
     * @param  string $urid URID stands for Unique Request Identifier If you pass in the URID parameter, we will make sure that the request you are referring to by this id is only processed once. This can be useful in low connectivity environments where you might not get a response back, even though we&#x27;ve successfully handled your request. By doing this, you can prevent duplicate or unknown webhooks to your application on retried requests. To use this parameter, it is very important that your URID parameter is unique per image sent because any future requests with the given URID will simply point back to the first request with that URID. Example scenario to use this feature: Mobile application sends a card, we receive it, we start processing it and send the application a 202 response. The mobile application enters a low connectivity area and does not get a response. The mobile application retries the request assuming it failed (however, it did not fail). Without the URID parameter for this request, we start processing a new transcription and give you another 202. This time the mobile application gets the response and is happy, but now also receives two webhooks, one being for a job that failed that has a different id. Because both requests were for the same transcription, the mobile application could have created a URID for this request that is the same for both requests, and the second (retry) request would simply receive a 202 with the id for the first request and the second (retry) request is never processed and not duplicated. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse202, HTTP status code, HTTP response headers (array of strings)
     */
    public function v2CardReaderPostWithHttpInfo($webhook_url, $front = null, $back = null, $verified = null, $returned_data = null, $format = null, $sandbox = null, $urid = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse202';
        $request = $this->v2CardReaderPostRequest($webhook_url, $front, $back, $verified, $returned_data, $format, $sandbox, $urid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse202',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation v2CardReaderPostAsync
     *
     * 
     *
     * @param  string $webhook_url This is the URL that a request will be made to once the card has been processed. Keep in mind that the URL must be properly escaped (i.e. ampersands) and/or URL encoded if not enclosed in single or double quotes (required)
     * @param  string $front (optional)
     * @param  string $back (optional)
     * @param  string $verified Used to specify the quality of transcription. Calls to verified&#x3D;medium require a FullContact premium account. low (default if not specified) - a single human transcription is completed. This is primarily used for testing or while in development. medium - human transcription plus single verification of each data element. This is primarily used when in production. (optional)
     * @param  string $returned_data A response can contain verified and unverified data, this parameter can be used to exclude unverified data from being returned in the response. verifiedOnly - non-verified results will be excluded from the response payload. (optional)
     * @param  string $format Card Reader can alter the casing of certain fields in the final results. default - (default if not specified) - the data is not modified uppercase - Affected fields are converted to UPPER CASE lettering lowercase - Affected fields are converted to lower case lettering titlecase - Affected fields are converted to Title Case lettering Affected fields include name (given name, family name, and middle initial), organizations (title and name), and address fields. (optional)
     * @param  string $sandbox Card Reader Sandbox is a free, quick response mode for testing and development. Read Carefully on how each status option behaves, and what to expect while testing. PROCESSING - The card will appear to be processing and never proceed to finish. There is no webhook. CALLBACK_MADE - After a short delay a request will be sent to your webhook (If the webhook fails, it will become CALLBACK_FAILED). CALLBACK_FAILED - There is no webhook, and the status is marked as CALLBACK_FAILED. CALLBACK_MADE_NOT_PROCESSABLE - After a short delay, an unprocessable indication message will be sent to your webhook (If the webhook fails, it will become CALLBACK_FAILED_NOT_PROCESSABLE). CALLBACK_FAILED_NOT_PROCESSABLE - There is no webhook, and the status is marked as CALLBACK_FAILED_NOT_PROCESSABLE. Sandbox webhooks will look the exact same as the normal responses. Sandbox uploads will have the same photos that you uploaded via POST. Sandbox content will work and look the exact same as normal requests. Other params such as returnedData, verified, format, etc... will work the same as normal requests. Contact data for sandbox is predefined and always the same. Sandbox cards will appear to be processing until a callback is made (if applicable). The Sandbox &#x27;short delay&#x27; before receiving a webhook ranges from 0 to 60 seconds (optional)
     * @param  string $urid URID stands for Unique Request Identifier If you pass in the URID parameter, we will make sure that the request you are referring to by this id is only processed once. This can be useful in low connectivity environments where you might not get a response back, even though we&#x27;ve successfully handled your request. By doing this, you can prevent duplicate or unknown webhooks to your application on retried requests. To use this parameter, it is very important that your URID parameter is unique per image sent because any future requests with the given URID will simply point back to the first request with that URID. Example scenario to use this feature: Mobile application sends a card, we receive it, we start processing it and send the application a 202 response. The mobile application enters a low connectivity area and does not get a response. The mobile application retries the request assuming it failed (however, it did not fail). Without the URID parameter for this request, we start processing a new transcription and give you another 202. This time the mobile application gets the response and is happy, but now also receives two webhooks, one being for a job that failed that has a different id. Because both requests were for the same transcription, the mobile application could have created a URID for this request that is the same for both requests, and the second (retry) request would simply receive a 202 with the id for the first request and the second (retry) request is never processed and not duplicated. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2CardReaderPostAsync($webhook_url, $front = null, $back = null, $verified = null, $returned_data = null, $format = null, $sandbox = null, $urid = null)
    {
        return $this->v2CardReaderPostAsyncWithHttpInfo($webhook_url, $front, $back, $verified, $returned_data, $format, $sandbox, $urid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v2CardReaderPostAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $webhook_url This is the URL that a request will be made to once the card has been processed. Keep in mind that the URL must be properly escaped (i.e. ampersands) and/or URL encoded if not enclosed in single or double quotes (required)
     * @param  string $front (optional)
     * @param  string $back (optional)
     * @param  string $verified Used to specify the quality of transcription. Calls to verified&#x3D;medium require a FullContact premium account. low (default if not specified) - a single human transcription is completed. This is primarily used for testing or while in development. medium - human transcription plus single verification of each data element. This is primarily used when in production. (optional)
     * @param  string $returned_data A response can contain verified and unverified data, this parameter can be used to exclude unverified data from being returned in the response. verifiedOnly - non-verified results will be excluded from the response payload. (optional)
     * @param  string $format Card Reader can alter the casing of certain fields in the final results. default - (default if not specified) - the data is not modified uppercase - Affected fields are converted to UPPER CASE lettering lowercase - Affected fields are converted to lower case lettering titlecase - Affected fields are converted to Title Case lettering Affected fields include name (given name, family name, and middle initial), organizations (title and name), and address fields. (optional)
     * @param  string $sandbox Card Reader Sandbox is a free, quick response mode for testing and development. Read Carefully on how each status option behaves, and what to expect while testing. PROCESSING - The card will appear to be processing and never proceed to finish. There is no webhook. CALLBACK_MADE - After a short delay a request will be sent to your webhook (If the webhook fails, it will become CALLBACK_FAILED). CALLBACK_FAILED - There is no webhook, and the status is marked as CALLBACK_FAILED. CALLBACK_MADE_NOT_PROCESSABLE - After a short delay, an unprocessable indication message will be sent to your webhook (If the webhook fails, it will become CALLBACK_FAILED_NOT_PROCESSABLE). CALLBACK_FAILED_NOT_PROCESSABLE - There is no webhook, and the status is marked as CALLBACK_FAILED_NOT_PROCESSABLE. Sandbox webhooks will look the exact same as the normal responses. Sandbox uploads will have the same photos that you uploaded via POST. Sandbox content will work and look the exact same as normal requests. Other params such as returnedData, verified, format, etc... will work the same as normal requests. Contact data for sandbox is predefined and always the same. Sandbox cards will appear to be processing until a callback is made (if applicable). The Sandbox &#x27;short delay&#x27; before receiving a webhook ranges from 0 to 60 seconds (optional)
     * @param  string $urid URID stands for Unique Request Identifier If you pass in the URID parameter, we will make sure that the request you are referring to by this id is only processed once. This can be useful in low connectivity environments where you might not get a response back, even though we&#x27;ve successfully handled your request. By doing this, you can prevent duplicate or unknown webhooks to your application on retried requests. To use this parameter, it is very important that your URID parameter is unique per image sent because any future requests with the given URID will simply point back to the first request with that URID. Example scenario to use this feature: Mobile application sends a card, we receive it, we start processing it and send the application a 202 response. The mobile application enters a low connectivity area and does not get a response. The mobile application retries the request assuming it failed (however, it did not fail). Without the URID parameter for this request, we start processing a new transcription and give you another 202. This time the mobile application gets the response and is happy, but now also receives two webhooks, one being for a job that failed that has a different id. Because both requests were for the same transcription, the mobile application could have created a URID for this request that is the same for both requests, and the second (retry) request would simply receive a 202 with the id for the first request and the second (retry) request is never processed and not duplicated. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v2CardReaderPostAsyncWithHttpInfo($webhook_url, $front = null, $back = null, $verified = null, $returned_data = null, $format = null, $sandbox = null, $urid = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse202';
        $request = $this->v2CardReaderPostRequest($webhook_url, $front, $back, $verified, $returned_data, $format, $sandbox, $urid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v2CardReaderPost'
     *
     * @param  string $webhook_url This is the URL that a request will be made to once the card has been processed. Keep in mind that the URL must be properly escaped (i.e. ampersands) and/or URL encoded if not enclosed in single or double quotes (required)
     * @param  string $front (optional)
     * @param  string $back (optional)
     * @param  string $verified Used to specify the quality of transcription. Calls to verified&#x3D;medium require a FullContact premium account. low (default if not specified) - a single human transcription is completed. This is primarily used for testing or while in development. medium - human transcription plus single verification of each data element. This is primarily used when in production. (optional)
     * @param  string $returned_data A response can contain verified and unverified data, this parameter can be used to exclude unverified data from being returned in the response. verifiedOnly - non-verified results will be excluded from the response payload. (optional)
     * @param  string $format Card Reader can alter the casing of certain fields in the final results. default - (default if not specified) - the data is not modified uppercase - Affected fields are converted to UPPER CASE lettering lowercase - Affected fields are converted to lower case lettering titlecase - Affected fields are converted to Title Case lettering Affected fields include name (given name, family name, and middle initial), organizations (title and name), and address fields. (optional)
     * @param  string $sandbox Card Reader Sandbox is a free, quick response mode for testing and development. Read Carefully on how each status option behaves, and what to expect while testing. PROCESSING - The card will appear to be processing and never proceed to finish. There is no webhook. CALLBACK_MADE - After a short delay a request will be sent to your webhook (If the webhook fails, it will become CALLBACK_FAILED). CALLBACK_FAILED - There is no webhook, and the status is marked as CALLBACK_FAILED. CALLBACK_MADE_NOT_PROCESSABLE - After a short delay, an unprocessable indication message will be sent to your webhook (If the webhook fails, it will become CALLBACK_FAILED_NOT_PROCESSABLE). CALLBACK_FAILED_NOT_PROCESSABLE - There is no webhook, and the status is marked as CALLBACK_FAILED_NOT_PROCESSABLE. Sandbox webhooks will look the exact same as the normal responses. Sandbox uploads will have the same photos that you uploaded via POST. Sandbox content will work and look the exact same as normal requests. Other params such as returnedData, verified, format, etc... will work the same as normal requests. Contact data for sandbox is predefined and always the same. Sandbox cards will appear to be processing until a callback is made (if applicable). The Sandbox &#x27;short delay&#x27; before receiving a webhook ranges from 0 to 60 seconds (optional)
     * @param  string $urid URID stands for Unique Request Identifier If you pass in the URID parameter, we will make sure that the request you are referring to by this id is only processed once. This can be useful in low connectivity environments where you might not get a response back, even though we&#x27;ve successfully handled your request. By doing this, you can prevent duplicate or unknown webhooks to your application on retried requests. To use this parameter, it is very important that your URID parameter is unique per image sent because any future requests with the given URID will simply point back to the first request with that URID. Example scenario to use this feature: Mobile application sends a card, we receive it, we start processing it and send the application a 202 response. The mobile application enters a low connectivity area and does not get a response. The mobile application retries the request assuming it failed (however, it did not fail). Without the URID parameter for this request, we start processing a new transcription and give you another 202. This time the mobile application gets the response and is happy, but now also receives two webhooks, one being for a job that failed that has a different id. Because both requests were for the same transcription, the mobile application could have created a URID for this request that is the same for both requests, and the second (retry) request would simply receive a 202 with the id for the first request and the second (retry) request is never processed and not duplicated. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function v2CardReaderPostRequest($webhook_url, $front = null, $back = null, $verified = null, $returned_data = null, $format = null, $sandbox = null, $urid = null)
    {
        // verify the required parameter 'webhook_url' is set
        if ($webhook_url === null || (is_array($webhook_url) && count($webhook_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webhook_url when calling v2CardReaderPost'
            );
        }

        $resourcePath = '/v2/cardReader';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($webhook_url !== null) {
            $queryParams['webhookUrl'] = ObjectSerializer::toQueryValue($webhook_url);
        }
        // query params
        if ($verified !== null) {
            $queryParams['verified'] = ObjectSerializer::toQueryValue($verified);
        }
        // query params
        if ($returned_data !== null) {
            $queryParams['returnedData'] = ObjectSerializer::toQueryValue($returned_data);
        }
        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }
        // query params
        if ($sandbox !== null) {
            $queryParams['sandbox'] = ObjectSerializer::toQueryValue($sandbox);
        }
        // query params
        if ($urid !== null) {
            $queryParams['URID'] = ObjectSerializer::toQueryValue($urid);
        }


        // form params
        if ($front !== null) {
            $formParams['front'] = ObjectSerializer::toFormValue($front);
        }
        // form params
        if ($back !== null) {
            $formParams['back'] = ObjectSerializer::toFormValue($back);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-FullContact-APIKey');
        if ($apiKey !== null) {
            $headers['X-FullContact-APIKey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
